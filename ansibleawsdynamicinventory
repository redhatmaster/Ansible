

$ export AWS_ACCESS_KEY_ID='YOUR_AWS_API_KEY'
$ export AWS_SECRET_ACCESS_KEY='YOUR_AWS_API_SECRET_KEY'

To get started with dynamic inventory management, you’ll need to grab the EC2.py script and the EC2.ini config file. The EC2.py script is written using the Boto EC2 library and will query AWS for your running Amazon EC2 instances. The EC2.ini file is the config file for EC2.py, and can be used to limit the scope of Ansible’s reach. You can specify the regions, instance tags, or roles that the EC2.py script will find. Personally, I’ve scoped Ansible to just look at the US-West-2 region.

https://raw.githubusercontent.com/ansible/ansible/devel/contrib/inventory/ec2.py
https://raw.githubusercontent.com/ansible/ansible/devel/contrib/inventory/ec2.ini

* Linked from this Ansible documentation: http://docs.ansible.com/ansible/intro_dynamic_inventory.html#example-aws-ec2-external-inventory-script

Use Wget/Curl/Git to pull those files down into the directory /etc/ansible/. I had to create this directory myself because I installed Ansible through pip.

Now you’ll need to set a few more environment variables for the inventory management script –

 $ export ANSIBLE_HOSTS=/etc/ansible/ec2.py This tells Ansible to use the dynamic EC2 script instead of a static /etc/ansible/hosts file.

Open up ec2.py in a text editor and make sure that the path to the ec2.ini config file is defined correctly at the top of the script:

$ export EC2_INI_PATH=/etc/ansible/ec2.ini This tells ec2.py where the ec2.ini config file is located.

As a quick aside, I’ll address SSH connectivity. The Ansible documentation covers this fairly comprehensively (http://docs.ansible.com/intro_getting_started.html), but we’ll cover this briefly to get up and running. There are several options for how you’d like to handle authentication. Passwords, while not recommended, are allowed, and you can also use an SSH agent for credential forwarding.

Using an SSH agent is the best way to authenticate with your end nodes, as this alleviates the need to copy your .pem files around. To add an agent, do


$ ssh-agent bash 
$ ssh-add ~/.ssh/keypair.pem 

More on SSH-agents: https://developer.github.com/guides/using-ssh-agent-forwarding/

At this stage, you should be ready to communicate with your instances. Here’s your mid-blog post checklist:

-Ansible is installed and has access to your Secret and Access key (via EC2 role or environment variable)
-Ec2.py and Ec2.ini inventory scripts are downloaded and configured
-ANSIBLE_HOSTS environment variable set
-Ansible.cfg exists
-SSH agent is running (You can check with “ssh-add -L”)

Now we’re ready to see Ansible shine. You can run a command or playbook against any collection instances based on common Amazon EC2 instance variables. These variables are listed here: http://docs.pythonboto.org/en/latest/ref/ec2.html#module-boto.ec2.instance

If you call the Amazon EC2 inventory script directly, you’ll see your Amazon EC2 inventory broken down and grouped by a variety of factors. To try this, run $ /etc/ansible/ec2.py --list

For a useful example of leveraging the Amazon EC2 instance variables, I currently have two instances with the tag “Ansible Slave” applied to them. Let’s ping them real quickly.


$ ansible -m ping tag_Ansible_Slave
10.1.2.137 | success >> {
    "changed": false, 
    "ping": "pong"
}

10.1.2.136 | success >> {
    "changed": false, 
    "ping": "pong"
}

